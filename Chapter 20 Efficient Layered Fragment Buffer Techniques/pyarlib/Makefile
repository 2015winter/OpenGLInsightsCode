
#Makefile generated by genmake.py (pknowles pyar.knowles@rmit.edu.au)
#Known Bugs: Not all source files/headers of sublibs (projects with their own
#makefile in subdirectories) are searched. Hence, the external library prediction
#does not always get all results

#check x64
ASFX=
LBITS := $(shell getconf LONG_BIT)
ifeq ($(LBITS),64)
ASFX=64
endif

NOOP = @$(SHELL) -c true


TARGET=pyarlib$(ASFX).a
CC=g++
LD=ar
CFLAGS_R?=
CFLAGS= $(CFLAGS_R) -Wno-unused-parameter -Wno-unused-but-set-variable  `pkg-config freetype2 --cflags` -Wall -Wextra -D_GNU_SOURCE -Wfatal-errors
LFLAGS= -rcs 
SUBLIBS= mesh/openctm/libopenctm$(ASFX).a mesh/lib3ds/lib3ds$(ASFX).a mesh/simpleobj/libsimpleobj$(ASFX).a
OBJECTS= config.o shaderbuild.o model.o matrix.o gpu.o ninebox.o jeltzfly.o thread.o shader.o texture.o profile.o jeltzgui.o shaderutil.o util.o matstack.o resources.o vec.o fileutil.o material.o camera.o meshctm.o guifps.o jeltz.o imgpng.o meshobj.o quaternion.o text.o quickgui.o png_loader.o immediate.o img.o vbomesh.o atlas.o prec.o mesh3ds.o

all: meshopenctmlibopenctma meshlibdslibdsa meshsimpleobjlibsimpleobja $(TARGET)

debug: CFLAGS+= -g
debug: export CFLAGS_R+= -g
debug: all

ALL_SUBLIBS= $(SUBLIBS)
SUBSUBLIBS= $(shell make echodeps --no-print-directory -C mesh/openctm/ 2>/dev/null)
ALL_SUBLIBS+= $(SUBSUBLIBS:%.a=mesh/openctm/%.a)
SUBSUBLIBS= $(shell make echodeps --no-print-directory -C mesh/lib3ds/ 2>/dev/null)
ALL_SUBLIBS+= $(SUBSUBLIBS:%.a=mesh/lib3ds/%.a)
SUBSUBLIBS= $(shell make echodeps --no-print-directory -C mesh/simpleobj/ 2>/dev/null)
ALL_SUBLIBS+= $(SUBSUBLIBS:%.a=mesh/simpleobj/%.a)

echodeps:
	@echo $(ALL_SUBLIBS)

$(TARGET): $(SUBLIBS) $(OBJECTS)
	@echo linking $(TARGET) '$(CFLAGS_R)'
	@$(LD) -o $(TARGET) $(OBJECTS) $(ALL_SUBLIBS) $(LFLAGS)
mesh/openctm/libopenctm$(ASFX).a:
	$(NOOP) #just so $(ASFX) doesnt cause makefile complaints
meshopenctmlibopenctma:
	@$(MAKE) --no-print-directory -C mesh/openctm -q || ( echo +mesh/openctm && $(MAKE) --no-print-directory -C mesh/openctm && echo -mesh/openctm )
mesh/lib3ds/lib3ds$(ASFX).a:
	$(NOOP) #just so $(ASFX) doesnt cause makefile complaints
meshlibdslibdsa:
	@$(MAKE) --no-print-directory -C mesh/lib3ds -q || ( echo +mesh/lib3ds && $(MAKE) --no-print-directory -C mesh/lib3ds && echo -mesh/lib3ds )
mesh/simpleobj/libsimpleobj$(ASFX).a:
	$(NOOP) #just so $(ASFX) doesnt cause makefile complaints
meshsimpleobjlibsimpleobja:
	@$(MAKE) --no-print-directory -C mesh/simpleobj -q || ( echo +mesh/simpleobj && $(MAKE) --no-print-directory -C mesh/simpleobj && echo -mesh/simpleobj )
config.o: config.cpp config.h includegl.h resources.h embed.h prec.h
	@echo compiling config.cpp
	@$(CC) -c -o config.o $(CFLAGS) config.cpp
shaderbuild.o: shaderbuild.cpp includegl.h fileutil.h shaderbuild.h util.h prec.h
	@echo compiling shaderbuild.cpp
	@$(CC) -c -o shaderbuild.o $(CFLAGS) shaderbuild.cpp
model.o: model.cpp shaderbuild.h vec.h gpu.h shader.h includegl.h texture.h model.h util.h shaderutil.h prec.h matrix.h
	@echo compiling model.cpp
	@$(CC) -c -o model.o $(CFLAGS) model.cpp
matrix.o: matrix.cpp includegl.h vec.h matrix.h prec.h
	@echo compiling matrix.cpp
	@$(CC) -c -o matrix.o $(CFLAGS) matrix.cpp
gpu.o: gpu.cpp vec.h gpu.h shader.h includegl.h matrix.h shaderbuild.h util.h shaderutil.h prec.h
	@echo compiling gpu.cpp
	@$(CC) -c -o gpu.o $(CFLAGS) gpu.cpp
ninebox.o: ninebox.cpp resources.h ninebox.h shaderbuild.h vec.h gpu.h shader.h includegl.h prec.h embed.h util.h atlas.h texture.h matrix.h
	@echo compiling ninebox.cpp
	@$(CC) -c -o ninebox.o $(CFLAGS) ninebox.cpp
jeltzfly.o: jeltzfly.cpp shaderbuild.h vec.h jeltz.h shader.h includegl.h jeltzfly.h camera.h matrix.h quaternion.h prec.h
	@echo compiling jeltzfly.cpp
	@$(CC) -c -o jeltzfly.o $(CFLAGS) jeltzfly.cpp
thread.o: thread.cpp includegl.h thread.h prec.h
	@echo compiling thread.cpp
	@$(CC) -c -o thread.o $(CFLAGS) thread.cpp
shader.o: shader.cpp fileutil.h vec.h shader.h includegl.h matrix.h shaderbuild.h util.h prec.h
	@echo compiling shader.cpp
	@$(CC) -c -o shader.o $(CFLAGS) shader.cpp
texture.o: texture.cpp includegl.h png_loader.h prec.h texture.h
	@echo compiling texture.cpp
	@$(CC) -c -o texture.o $(CFLAGS) texture.cpp
profile.o: profile.cpp profile.h vec.h shader.h includegl.h matrix.h shaderbuild.h prec.h
	@echo compiling profile.cpp
	@$(CC) -c -o profile.o $(CFLAGS) profile.cpp
jeltzgui.o: jeltzgui.cpp jeltzgui.h shaderbuild.h vec.h jeltz.h texture.h gpu.h includegl.h immediate.h guifps.h matstack.h util.h ninebox.h prec.h config.h profile.h atlas.h shader.h matrix.h quickgui.h text.h
	@echo compiling jeltzgui.cpp
	@$(CC) -c -o jeltzgui.o $(CFLAGS) jeltzgui.cpp
shaderutil.o: shaderutil.cpp includegl.h camera.h matrix.h util.h vec.h shaderutil.h prec.h
	@echo compiling shaderutil.cpp
	@$(CC) -c -o shaderutil.o $(CFLAGS) shaderutil.cpp
util.o: util.cpp util.h includegl.h prec.h
	@echo compiling util.cpp
	@$(CC) -c -o util.o $(CFLAGS) util.cpp
matstack.o: matstack.cpp includegl.h vec.h prec.h matstack.h matrix.h
	@echo compiling matstack.cpp
	@$(CC) -c -o matstack.o $(CFLAGS) matstack.cpp
resources.o: resources.cpp includegl.h resources.h resourcedefs.h embed.h prec.h
	@echo compiling resources.cpp
	@$(CC) -c -o resources.o $(CFLAGS) resources.cpp
vec.o: vec.cpp vec.h
	@echo compiling vec.cpp
	@$(CC) -c -o vec.o $(CFLAGS) vec.cpp
fileutil.o: fileutil.cpp includegl.h prec.h
	@echo compiling fileutil.cpp
	@$(CC) -c -o fileutil.o $(CFLAGS) fileutil.cpp
material.o: material.cpp vec.h gpu.h vbomesh.h includegl.h shader.h matrix.h shaderbuild.h material.h shaderutil.h loader.h
	@echo compiling material.cpp
	@$(CC) -c -o material.o $(CFLAGS) material.cpp
camera.o: camera.cpp includegl.h vec.h camera.h matrix.h prec.h
	@echo compiling camera.cpp
	@$(CC) -c -o camera.o $(CFLAGS) camera.cpp
meshctm.o: meshctm.cpp vec.h gpu.h vbomesh.h includegl.h shader.h matrix.h shaderbuild.h mesh/openctm/openctm.h meshctm.h prec.h loader.h
	@echo compiling meshctm.cpp
	@$(CC) -c -o meshctm.o $(CFLAGS) meshctm.cpp
guifps.o: guifps.cpp shaderbuild.h ninebox.h matstack.h vec.h shader.h gpu.h includegl.h immediate.h guifps.h text.h quickgui.h atlas.h prec.h matrix.h
	@echo compiling guifps.cpp
	@$(CC) -c -o guifps.o $(CFLAGS) guifps.cpp
jeltz.o: jeltz.cpp vec.h jeltz.h shader.h includegl.h matrix.h shaderbuild.h prec.h
	@echo compiling jeltz.cpp
	@$(CC) -c -o jeltz.o $(CFLAGS) jeltz.cpp
imgpng.o: imgpng.cpp includegl.h imgpng.h img.h prec.h
	@echo compiling imgpng.cpp
	@$(CC) -c -o imgpng.o $(CFLAGS) imgpng.cpp
meshobj.o: meshobj.cpp vec.h gpu.h mesh/simpleobj/obj.h includegl.h shader.h prec.h matrix.h shaderbuild.h material.h vbomesh.h meshobj.h texture.h loader.h
	@echo compiling meshobj.cpp
	@$(CC) -c -o meshobj.o $(CFLAGS) meshobj.cpp
quaternion.o: quaternion.cpp includegl.h vec.h prec.h quaternion.h matrix.h
	@echo compiling quaternion.cpp
	@$(CC) -c -o quaternion.o $(CFLAGS) quaternion.cpp
text.o: text.cpp resources.h shaderbuild.h fileutil.h vec.h shader.h img.h gpu.h includegl.h text.h embed.h util.h imgpng.h shaderutil.h prec.h matrix.h
	@echo compiling text.cpp
	@$(CC) -c -o text.o $(CFLAGS) text.cpp
quickgui.o: quickgui.cpp config.h ninebox.h matstack.h vec.h shader.h gpu.h includegl.h immediate.h prec.h quickgui.h shaderbuild.h util.h atlas.h text.h texture.h matrix.h
	@echo compiling quickgui.cpp
	@$(CC) -c -o quickgui.o $(CFLAGS) quickgui.cpp
png_loader.o: png_loader.cpp includegl.h png_loader.h prec.h
	@echo compiling png_loader.cpp
	@$(CC) -c -o png_loader.o $(CFLAGS) png_loader.cpp
immediate.o: immediate.cpp resources.h shaderbuild.h vec.h shader.h embed.h gpu.h includegl.h immediate.h matrix.h matstack.h prec.h
	@echo compiling immediate.cpp
	@$(CC) -c -o immediate.o $(CFLAGS) immediate.cpp
img.o: img.cpp includegl.h prec.h img.h
	@echo compiling img.cpp
	@$(CC) -c -o img.o $(CFLAGS) img.cpp
vbomesh.o: vbomesh.cpp vec.h gpu.h vbomesh.h includegl.h shader.h matrix.h shaderbuild.h util.h shaderutil.h prec.h loader.h
	@echo compiling vbomesh.cpp
	@$(CC) -c -o vbomesh.o $(CFLAGS) vbomesh.cpp
atlas.o: atlas.cpp gpu.h resources.h atlas.h shaderbuild.h vec.h shader.h img.h vbomesh.h includegl.h matrix.h embed.h util.h imgpng.h shaderutil.h prec.h loader.h
	@echo compiling atlas.cpp
	@$(CC) -c -o atlas.o $(CFLAGS) atlas.cpp
prec.o: prec.cpp includegl.h prec.h
	@echo compiling prec.cpp
	@$(CC) -c -o prec.o $(CFLAGS) prec.cpp
mesh3ds.o: mesh3ds.cpp shaderbuild.h mesh3ds.h vec.h gpu.h vbomesh.h includegl.h shader.h matrix.h matstack.h mesh/lib3ds/lib3ds.h prec.h loader.h
	@echo compiling mesh3ds.cpp
	@$(CC) -c -o mesh3ds.o $(CFLAGS) mesh3ds.cpp
clean:
	@echo cleaning $(TARGET)
	@rm -f config.o shaderbuild.o model.o matrix.o gpu.o ninebox.o jeltzfly.o thread.o shader.o texture.o profile.o jeltzgui.o shaderutil.o util.o matstack.o resources.o vec.o fileutil.o material.o camera.o meshctm.o guifps.o jeltz.o imgpng.o meshobj.o quaternion.o text.o quickgui.o png_loader.o immediate.o img.o vbomesh.o atlas.o prec.o mesh3ds.o
	@echo +mesh/openctm
	@$(MAKE) clean --no-print-directory -C mesh/openctm
	@echo -mesh/openctm
	@echo +mesh/lib3ds
	@$(MAKE) clean --no-print-directory -C mesh/lib3ds
	@echo -mesh/lib3ds
	@echo +mesh/simpleobj
	@$(MAKE) clean --no-print-directory -C mesh/simpleobj
	@echo -mesh/simpleobj
	@rm -f $(TARGET)










